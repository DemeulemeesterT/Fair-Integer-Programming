1. For Nash and Leximin, and for between 10 and 30 jobs (with steps of 5), we used:
 	run_distribution_all_TotalTard("LC", 50, 0, 3600.0, 100, false);

   and in the run_distribution, the first lines were:
	// Prepare to go through all instances
	std::vector<int> N_vector;
	std::vector<double> beta_vector;
	N_vector = { 10,15,20,25,30 };
	beta_vector = { 0.05, 0.25, 0.5 };

	// Create vector with seeds, and export it
	std::mt19937 generator((unsigned)seed);
	std::uniform_int_distribution<int> distr(-100000000, 100000000);


   However, for 30 jobs and beta = 0.50, solving the partition proved to be a tedious job.
   There were several instances for which the partition couldn't be found in multiple hours.

   Nash couldn't run through TT_30_0.05_18.

2. To run the RSD, re-order, and perturb we used:
	run_distribution_all_TotalTard("ROP", 50, 0, 3600.0, 1000, false);

   
   and in the run_distribution file, the first lines were: 
	std::vector<int> N_vector;
	std::vector<double> beta_vector;
	N_vector = { 10, 15, 20, 25, 30 };
	beta_vector = { 0.05, 0.25, 0.50 };

	// Create vector with seeds, and export it
	std::mt19937 generator((unsigned)seed);
	std::uniform_int_distribution<int> distr(-100000000, 100000000);

   There was a problem during TT_15_0.25_22. Voor random order i = 658, voor student j = 6 in de order.
   We will do RSD again for all previous instances, but this didn't affect the other distributions.

3. We continue running, with the same commands, but with an additional piece of code.
   This avoids the instances we already ran.

	// Create boolean vector to decide which instances should be run
	std::vector<std::vector<std::vector<bool>>> run_vector(N_vector.size(), std::vector<std::vector<bool>>(beta_vector.size(), std::vector<bool>(inst_generated, 0)));
	
	for (int p = 0; p < N_vector.size(); p++) {
		for (int b = 0; b < beta_vector.size(); b++) {
			for (int i = 0; i < inst_generated; i++) {
				if (p == 1) {
					if (b == 1) {
						if (i >= 22) {
							run_vector[p][b][i] = true;
						}
					}
					else if (b == 2) {
						run_vector[p][b][i] = true;
					}
				}
				else if (p >= 2) {
					run_vector[p][b][i] = true;
				}
			}
		}
	}


